#include<iostream>
#include<string.h>
#include<vector>
using namespace std;
int* lps(string txt)
{
    int n = txt.length();
    int *lps_arr = new int[n];
    lps_arr[0] = 0 ;
    int i =1, len = 0;
    while(i < n)
    {
        if(txt[i] == txt[len])
            len++, lps_arr[i] = len, i++;
        else{
            if(len == 0)
                lps_arr[i] = len, i++;
            else
                len = lps_arr[len - 1];
        }
            
    }
    return lps_arr;
}
vector<int> kmp(string txt, string pat)
{
    vector<int> v;
    int n = txt.length();
    int m = pat.length();
    int *lps_arr = lps(pat);
    
    int i = 0, j = 0;
    while(i<n)
    {
        if(txt[i] == pat[j])
            i++, j++;
        if(j == m)
            v.push_back(i - j) , j = lps_arr[j-1];
        else if(i<n && txt[i] != pat[j])
        {
            if(j == 0 )
                i++;
            else
                j = lps_arr[j-1];
            
        }
    }
    return v;
}
int main()
{
    string txt = "aaaabb";
    string pat = "aa";
    vector<int> v = kmp(txt, pat);
    for(auto it: v)
        cout<<it<<endl;
    return 0;
}
